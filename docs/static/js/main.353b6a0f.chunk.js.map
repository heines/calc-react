{"version":3,"sources":["Display.js","CalcBtn.js","Calc.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","param","CalcBtn","onClick","value","Calc","state","ans","num","ope","nget","calc","sep","i","this","setState","Number","ansStr","String","length","operator","toExp","toExponential","handleClickClear","handleClickNum","disp","handleClickOperator","equal","handleClickCalc","ac","sign","handleClickSign","handleClickPercentage","handleClickDecPoint","setClear","setSign","setPercentage","setOperator","setNum","setDecPoint","setCalc","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.353b6a0f.chunk.js","sourcesContent":["import React from 'react';\nimport './Display.scss';\n\nfunction Display(props) {\n  return (\n    <div className=\"p-display\">\n      {props.param}\n    </div>\n  );\n}\n\nexport default Display;\n","import React from 'react';\nimport './Calc.scss';\nimport './Display.scss';\n\nfunction CalcBtn(props) {\n  return (\n    <div className=\"p-calc__cell\" onClick={props.onClick}>\n      {props.value}\n    </div>\n  );\n}\n\nexport default CalcBtn;\n","import React from 'react';\nimport './Calc.scss';\nimport Display from './Display';\nimport CalcBtn from './CalcBtn';\n\nclass Calc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ans: 0,\n      num: 0,\n      ope: \"plus\",\n      nget: true,\n      calc: false,\n      sep: false\n    };\n  }\n\n  handleClickNum(i) {\n    let ans = this.state.ans;\n    let num = this.state.num;\n    if(this.state.nget) {\n      this.setState({\n        ans: Number(i),\n        nget: false,\n      });\n    } else {\n      let ansStr = String(ans) + String(i);\n      if(ansStr.length < 15) {\n        this.setState({\n          ans: Number(ansStr),\n        });\n      }\n    }\n  }\n\n  handleClickClear() {\n    this.setState({\n      ans: 0,\n      num: 0,\n      ope: \"plus\",\n      nget: true,\n      calc: false,\n      sep: false,\n    })\n  }\n\n  handleClickOperator(operator) {\n    let ans = this.state.ans;\n    if(this.state.calc) {\n      ans = this.calc();\n    }\n    this.setState({\n      ans: ans,\n      num: ans,\n      ope: operator,\n      nget: true,\n      calc: true,\n      sep: false,\n    });\n  }\n\n  calc() {\n    let num = Number(this.state.num);\n    let ans = Number(this.state.ans);\n    switch (this.state.ope) {\n      case \"plus\":\n        return this.toExp(num + ans);\n      case \"minus\":\n        return this.toExp(num - ans);\n      case \"times\":\n        return this.toExp(num * ans);\n      case \"dividedby\":\n        return this.toExp(num / ans);\n      default:\n        return this.toExp(num + ans);\n    }\n  }\n\n  toExp(num) {\n    if(String(num).length > 15) {\n      return Number(num).toExponential(8);\n    } else {\n      return num;\n    }\n  }\n\n  handleClickCalc() {\n    let ans = this.calc();\n    this.handleClickClear();\n    this.setState({\n      ans: ans,\n    });\n  }\n\n  handleClickPercentage() {\n    let ans = this.toExp(this.state.ans * 0.01);\n    this.handleClickClear();\n    this.setState({\n      ans: ans,\n    });\n  }\n\n  handleClickSign() {\n    let ans = this.toExp(this.state.ans * (-1));\n    this.setState({\n      ans: ans\n    });\n  }\n\n  handleClickDecPoint() {\n    let ans = this.state.ans;\n    if(!this.state.sep) {\n      this.setState({\n        ans: String(ans) + '.',\n        sep: true\n      })\n    }\n  }\n\n  setNum(i) {\n    return (\n      <CalcBtn\n        value={i}\n        onClick={() => this.handleClickNum(i)}\n      />\n    );\n  }\n\n  setOperator(disp, operator) {\n    return (\n      <CalcBtn\n        value={disp}\n        onClick={() => this.handleClickOperator(operator)}\n      />\n    )\n  }\n\n  setCalc(equal) {\n    return (\n      <CalcBtn\n        value={equal}\n        onClick={() => this.handleClickCalc()}\n      />\n    )\n  }\n\n  setClear(ac) {\n    return (\n      <CalcBtn\n        value={ac}\n        onClick={() => this.handleClickClear()}\n      />\n    )\n  }\n\n  setSign(sign) {\n    return (\n      <CalcBtn\n        value={sign}\n        onClick={() => this.handleClickSign()}\n      />\n    )\n  }\n\n  setPercentage() {\n    return (\n      <CalcBtn\n        value={\"%\"}\n        onClick={() => this.handleClickPercentage()}\n      />\n    )\n  }\n\n  setDecPoint() {\n    return (\n      <CalcBtn\n        value={\".\"}\n        onClick={() => this.handleClickDecPoint()}\n      />\n    )\n  }\n\n  render() {\n    let ans = this.state.ans;\n    return (\n      <div className=\"p-calc\">\n        <Display />\n        <Display param={ans} />\n        <div className=\"p-calc__row\">\n          {this.setClear(\"AC\")}\n          {this.setSign(\"+/-\")}\n          {this.setPercentage()}\n          {this.setOperator(\"÷\", \"dividedby\")}\n        </div>\n        <div className=\"p-calc__row\">\n          {this.setNum(\"7\")}\n          {this.setNum(\"8\")}\n          {this.setNum(\"9\")}\n          {this.setOperator(\"×\", \"times\")}\n        </div>\n        <div className=\"p-calc__row\">\n          {this.setNum(\"4\")}\n          {this.setNum(\"5\")}\n          {this.setNum(\"6\")}\n          {this.setOperator(\"−\", \"minus\")}\n        </div>\n        <div className=\"p-calc__row\">\n          {this.setNum(\"1\")}\n          {this.setNum(\"2\")}\n          {this.setNum(\"3\")}\n          {this.setOperator(\"+\", \"plus\")}\n        </div>\n        <div className=\"p-calc__row\">\n          {this.setNum(\"0\")}\n          {this.setNum(\"00\")}\n          {this.setDecPoint()}\n          {this.setCalc(\"=\")}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calc;\n","import React from 'react';\nimport './App.css';\nimport Calc from './Calc';\nimport Display from './Display';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calc />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}